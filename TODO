0) work out how to make it testable

1) update/write the docs

3) better connection tracking so we can stop when we're finished
3b) per-request timeouts when server is not responding

4) default check_response_header could do something useful (such as
comparing http status and content-type with the recorded script)

6) I rather suspect our response parsing is dog-slow, and for load
tests we should replace it with something simpler.  Note that http
headers are all US-ASCII - we don't need to worry about utf-8 or anything

10) socket options - try to get approximately the same TCP behaviour as the 
orginal requests would have had

11) we send an http/1.0 request but handle the response mostly as if
it were 1.1 (chunking excepted) - e.g. we default to persistent
connects.  We should send the same http version that was in the
script, and we should behave accordingly

12) It would be instructve to know whether real browsers always open
two sockets/host or just one - when do they decide the second pipe is
needed?  It's a little bizarre to see the cs being fetched before teh
html that refers to it.

13) we don't have the standard "block all connections while
downloading a script" behaviour, though maybe that's not a real big
deal as the delays in the original request will simulate it more or
less - until the site gets slow.

18) munge_request should not alter the request in-place because it
will break other users running the same session.  Perhaps instead we
should return a new set of request headers, or something

19) two connections/browser/hostname: we have rigged this slightly,
because we do not close the http sockets for a session when it starts
making https requests - need to find out what real browsers do.  

Since mixed content is frowned on, chances are we're only using one
pair or the other and the difference only becmoes apparent if a
connection switches to https and back again before the old http
connections are timed-out.  But it would be good to do it properly